---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import ViewToggle from '../components/ViewToggle.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../components/FormattedDate.astro';

// Get all characters from the new characters collection
const characterPosts = (await getCollection('characters'))
	.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Note: View filtering will be handled client-side to enable URL-based view switching
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={`Characters - ${SITE_TITLE}`} description="Campaign Characters and NPCs" />
		<style>
			main {
				width: 960px;
			}
			ul {
				display: flex;
				flex-wrap: wrap;
				gap: 2rem;
				list-style-type: none;
				margin: 0;
				padding: 0;
			}
			ul li {
				width: calc(33.333% - 1.333rem);
				position: relative;
			}
			ul li * {
				text-decoration: none;
				transition: 0.2s ease;
			}
			ul li img {
				margin-bottom: 0.5rem;
				border-radius: 12px;
				width: 100%;
				height: 200px;
				object-fit: cover;
			}
			ul li a {
				display: block;
			}
			.title {
				margin: 0;
				color: rgb(var(--black));
				line-height: 1;
				font-size: 1.2rem;
			}
			.date {
				margin: 0;
				color: rgb(var(--gray));
				font-size: 0.9rem;
			}
			.description {
				margin: 0.5rem 0 0;
				color: rgb(var(--gray-dark));
				font-size: 0.9rem;
				line-height: 1.4;
			}
			ul li a:hover h4,
			ul li a:hover .date {
				color: rgb(var(--accent));
			}
			ul li a:hover img {
				box-shadow: var(--box-shadow);
			}
			.post-item {
				transition: opacity 0.2s ease;
			}
			.post-item.hidden {
				display: none;
			}
			.gm-only-indicator {
				position: absolute;
				top: 8px;
				left: 8px;
				background: #ff6b35;
				color: white;
				padding: 0.25rem 0.5rem;
				border-radius: 4px;
				font-size: 0.75rem;
				font-weight: 600;
				z-index: 10;
			}
			.player-safe-indicator {
				position: absolute;
				top: 8px;
				left: 8px;
				background: #28a745;
				color: white;
				padding: 0.25rem 0.5rem;
				border-radius: 4px;
				font-size: 0.75rem;
				font-weight: 600;
				z-index: 10;
			}
			@media (max-width: 720px) {
				ul {
					gap: 0.5em;
				}
				ul li {
					width: 100%;
					text-align: center;
				}
			}
			.page-header {
				text-align: center;
				margin-bottom: 2rem;
			}
			.page-header h1 {
				font-size: 2.5rem;
				color: rgb(var(--black));
				margin-bottom: 0.5rem;
			}
			.page-header p {
				color: rgb(var(--gray));
				font-size: 1.1rem;
			}
		</style>
	</head>
	<body>
		<Header />
		<ViewToggle />
		<main>
			<div class="page-header">
				<h1>Characters</h1>
				<p>NPCs and notable characters in the campaign world</p>
			</div>
			<section>
				<ul id="character-list">
					{
						characterPosts.map((post) => (
							<li class="post-item" 
								data-gm-only={post.data.gmOnly || false} 
								data-player-visible={post.data.playerVisible !== false}
								data-has-spoilers={post.data.tags?.includes('spoiler') || false}>
								<a href={`/characters/${post.slug}/`}>
									{post.data.gmOnly && <div class="gm-only-indicator">GM Only</div>}
									{post.data.playerVisible === true && <div class="player-safe-indicator">Player Safe</div>}
									<img width={320} height={200} src={post.data.heroImage} alt="" />
									<h4 class="title">{post.data.title}</h4>
									<p class="date">
										<FormattedDate date={post.data.pubDate} />
									</p>
									<p class="description">{post.data.description}</p>
								</a>
							</li>
						))
					}
				</ul>
			</section>
		</main>
		<Footer />
		
		<script>
			const VIEW_TYPES = {
				PLAYER: 'player',
				GM: 'gm'
			};

			function getCurrentView() {
				const params = new URLSearchParams(window.location.search);
				const view = params.get('view');
				return view === VIEW_TYPES.GM ? VIEW_TYPES.GM : VIEW_TYPES.PLAYER;
			}

			function filterContent() {
				const currentView = getCurrentView();
				const posts = document.querySelectorAll('.post-item');
				
				posts.forEach(post => {
					const gmOnly = post.dataset.gmOnly === 'true';
					const playerVisible = post.dataset.playerVisible === 'true';
					const hasSpoilers = post.dataset.hasSpoilers === 'true';
					
					let shouldShow = true;
					
					if (currentView === VIEW_TYPES.PLAYER) {
						// Player view: hide GM-only content and spoilers
						if (gmOnly || hasSpoilers || playerVisible === false) {
							shouldShow = false;
						}
					}
					// GM view: show everything (shouldShow remains true)
					
					if (shouldShow) {
						post.classList.remove('hidden');
					} else {
						post.classList.add('hidden');
					}
				});
			}

			// Filter content on page load
			document.addEventListener('DOMContentLoaded', filterContent);
			
			// Re-filter when URL changes (for back/forward navigation)
			window.addEventListener('popstate', filterContent);
		</script>
	</body>
</html>
