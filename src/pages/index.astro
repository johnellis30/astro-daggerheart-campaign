---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import { getCollection } from 'astro:content';

// Get content counts from new collections
const characters = await getCollection('characters');
const locations = await getCollection('locations');
const adventures = await getCollection('adventures');
const monsters = await getCollection('monsters');
const items = await getCollection('items');
const campaign = await getCollection('campaign');
const environments = await getCollection('environments');

const characterCount = characters.length;
const locationCount = locations.length + environments.length; // Include environments in locations
const adventureCount = adventures.length;
const monsterCount = monsters.length;
const itemCount = items.length;
const campaignCount = campaign.length;
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
		<style>
			.hero {
				text-align: center;
				margin: 2rem 0 3rem;
			}
			.hero h1 {
				font-size: 3rem;
				color: rgb(var(--black));
				margin-bottom: 1rem;
			}
			.hero p {
				font-size: 1.2rem;
				color: rgb(var(--gray));
				max-width: 600px;
				margin: 0 auto;
			}
			.categories {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
				gap: 2rem;
				margin: 3rem 0;
			}
			.category-card {
				background: white;
				border-radius: 12px;
				padding: 2rem;
				text-align: center;
				text-decoration: none;
				transition: 0.2s ease;
				border: 1px solid rgb(var(--gray-light));
				box-shadow: 0 2px 8px rgba(var(--black), 5%);
			}
			.category-card:hover {
				transform: translateY(-2px);
				box-shadow: 0 8px 25px rgba(var(--black), 15%);
			}
			.category-card h3 {
				font-size: 1.5rem;
				color: rgb(var(--black));
				margin-bottom: 0.5rem;
			}
			.category-card p {
				color: rgb(var(--gray));
				margin-bottom: 1rem;
			}
			.category-count {
				background: rgb(var(--accent));
				color: white;
				padding: 0.25rem 0.75rem;
				border-radius: 20px;
				font-size: 0.9rem;
				font-weight: bold;
			}
			@media (max-width: 720px) {
				.categories {
					grid-template-columns: 1fr;
					gap: 1rem;
				}
				.hero h1 {
					font-size: 2rem;
				}
			}
			.map-section {
				text-align: center;
				margin: 4rem 0 2rem;
				padding: 2rem;
			}
			.map-section h2 {
				font-size: 2rem;
				color: rgb(var(--black));
				margin-bottom: 1rem;
			}
			.map-section p {
				color: rgb(var(--gray));
				margin-bottom: 2rem;
				max-width: 600px;
				margin-left: auto;
				margin-right: auto;
			}
			.map-container {
				background: white;
				border-radius: 12px;
				padding: 1rem;
				box-shadow: 0 8px 32px rgba(var(--black), 15%);
				display: inline-block;
			}
			.map-container img {
				width: 100%;
				max-width: 800px;
				height: auto;
				border-radius: 8px;
			}
			@media (max-width: 720px) {
				.map-section {
					margin: 2rem 0 1rem;
					padding: 1rem;
				}
				.map-section h2 {
					font-size: 1.5rem;
				}
			}
			/* Modal styles */
			.modal {
				display: none;
				position: fixed;
				top: 0;
				left: 0;
				width: 100vw;
				height: 100vh;
				background: rgba(0, 0, 0, 0.9);
				z-index: 1000;
				justify-content: center;
				align-items: center;
			}
			.modal.show {
				display: flex !important;
			}
			.modal-content {
				position: relative;
				max-width: 95vw;
				max-height: 95vh;
				background: white;
				border-radius: 12px;
				padding: 1rem;
				overflow: hidden;
				display: flex;
				flex-direction: column;
			}
			.modal img {
				width: 100%;
				height: auto;
				max-width: 1200px;
				border-radius: 8px;
				display: block;
				transition: transform 0.3s ease;
				cursor: grab;
			}
			.modal img:active {
				cursor: grabbing;
			}
			.zoom-controls {
				position: absolute;
				top: 20px;
				left: 20px;
				display: flex;
				flex-direction: column;
				gap: 10px;
				z-index: 1002;
			}
			.zoom-button {
				background: rgba(35, 55, 255, 0.9);
				color: white;
				border: none;
				border-radius: 6px;
				width: 40px;
				height: 40px;
				font-size: 18px;
				font-weight: bold;
				cursor: pointer;
				display: flex;
				align-items: center;
				justify-content: center;
				box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
			}
			.zoom-button:hover {
				background: rgba(0, 13, 138, 0.9);
			}
			.image-container {
				overflow: auto;
				border-radius: 8px;
				flex: 1;
				position: relative;
			}
			.close-button {
				position: absolute;
				top: -15px;
				right: -15px;
				background: #ff4444;
				color: white;
				border: none;
				border-radius: 50%;
				width: 40px;
				height: 40px;
				font-size: 20px;
				font-weight: bold;
				cursor: pointer;
				display: flex;
				align-items: center;
				justify-content: center;
				box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
				z-index: 1001;
			}
			.close-button:hover {
				background: #cc0000;
			}
			.map-container {
				cursor: pointer;
				transition: transform 0.2s ease;
			}
			.map-container:hover {
				transform: scale(1.02);
			}
		</style>
	</head>
	<body>
		<Header />
		<main>
			<div class="hero">
				<h1>Shadows of the Ancient Dawn</h1>
				<p>
					Explore the world of Eldoria through its characters, locations, adventures, and lore. 
					Navigate using the categories below to discover the rich content of our campaign setting.
				</p>
			</div>
			
			<div class="categories">
				<a href="/characters" class="category-card">
					<h3>Characters</h3>
					<p>NPCs and notable figures in the campaign world</p>
					<span class="category-count">{characterCount} entries</span>
				</a>
				
				<a href="/locations" class="category-card">
					<h3>Locations</h3>
					<p>Places and environments to explore</p>
					<span class="category-count">{locationCount} entries</span>
				</a>
				
				<a href="/adventures" class="category-card">
					<h3>Adventures</h3>
					<p>Quests and story arcs in the campaign</p>
					<span class="category-count">{adventureCount} entries</span>
				</a>
				
				<a href="/monsters" class="category-card">
					<h3>Monsters</h3>
					<p>Adversaries and creatures to encounter</p>
					<span class="category-count">{monsterCount} entries</span>
				</a>
				
				<a href="/items" class="category-card">
					<h3>Items</h3>
					<p>Treasures and artifacts to discover</p>
					<span class="category-count">{itemCount} entries</span>
				</a>
				
				<a href="/campaign" class="category-card">
					<h3>Campaign</h3>
					<p>Lore, background, and world information</p>
					<span class="category-count">{campaignCount} entries</span>
				</a>
			</div>

			<div class="map-section">
				<h2>The World of Eldoria</h2>
				<p>
					Discover the lands, kingdoms, and territories that make up our campaign world. 
					Click on the map to explore it in detail.
				</p>
				<div class="map-container">
					<img src="/images/Eldoria.png" alt="Map of Eldoria" />
				</div>
			</div>

			<!-- Modal for full-size map -->
			<div id="mapModal" class="modal">
				<div class="modal-content">
					<button class="close-button">&times;</button>
					<div class="zoom-controls">
						<button class="zoom-button" id="zoomIn" title="Zoom In">+</button>
						<button class="zoom-button" id="zoomOut" title="Zoom Out">−</button>
						<button class="zoom-button" id="resetZoom" title="Reset Zoom">⌂</button>
					</div>
					<div class="image-container" id="imageContainer">
						<img id="modalImage" src="/images/Eldoria.png" alt="Map of Eldoria - Full Size" />
					</div>
					<p style="text-align: center; margin-top: 1rem; color: #666;">Use +/- buttons to zoom, drag to pan, or scroll wheel to zoom</p>
				</div>
			</div>
		</main>
		<Footer />

		<script>
			document.addEventListener('DOMContentLoaded', function() {
				const mapContainer = document.querySelector('.map-container');
				const modal = document.getElementById('mapModal');
				const closeButton = document.querySelector('.close-button');
				const modalImage = document.getElementById('modalImage');
				const imageContainer = document.getElementById('imageContainer');
				const zoomInBtn = document.getElementById('zoomIn');
				const zoomOutBtn = document.getElementById('zoomOut');
				const resetZoomBtn = document.getElementById('resetZoom');

				let scale = 1;
				let isDragging = false;
				let startX, startY, scrollLeft, scrollTop;

				// Open modal when clicking map
				if (mapContainer) {
					mapContainer.addEventListener('click', function() {
						if (modal) {
							modal.classList.add('show');
							resetZoom();
						}
					});
				}

				// Close modal when clicking close button
				if (closeButton) {
					closeButton.addEventListener('click', function() {
						if (modal) {
							modal.classList.remove('show');
						}
					});
				}

				// Close modal when clicking outside
				if (modal) {
					modal.addEventListener('click', function(event) {
						if (event.target === modal) {
							modal.classList.remove('show');
						}
					});
				}

				// Close modal on Escape key
				document.addEventListener('keydown', function(event) {
					if (event.key === 'Escape' && modal) {
						modal.classList.remove('show');
					}
				});

				// Zoom functions
				function updateZoom() {
					if (modalImage) {
						modalImage.style.transform = `scale(${scale})`;
					}
				}

				function resetZoom() {
					scale = 1;
					updateZoom();
					if (imageContainer) {
						imageContainer.scrollTop = 0;
						imageContainer.scrollLeft = 0;
					}
				}

				// Zoom button events
				if (zoomInBtn) {
					zoomInBtn.addEventListener('click', function() {
						scale = Math.min(scale * 1.2, 5); // Max 5x zoom
						updateZoom();
					});
				}

				if (zoomOutBtn) {
					zoomOutBtn.addEventListener('click', function() {
						scale = Math.max(scale / 1.2, 0.5); // Min 0.5x zoom
						updateZoom();
					});
				}

				if (resetZoomBtn) {
					resetZoomBtn.addEventListener('click', resetZoom);
				}

				// Mouse wheel zoom
				if (imageContainer) {
					imageContainer.addEventListener('wheel', function(e) {
						e.preventDefault();
						const delta = e.deltaY > 0 ? 0.9 : 1.1;
						scale = Math.min(Math.max(scale * delta, 0.5), 5);
						updateZoom();
					});

					// Pan functionality
					imageContainer.addEventListener('mousedown', function(e) {
						isDragging = true;
						startX = e.pageX - imageContainer.offsetLeft;
						startY = e.pageY - imageContainer.offsetTop;
						scrollLeft = imageContainer.scrollLeft;
						scrollTop = imageContainer.scrollTop;
						imageContainer.style.cursor = 'grabbing';
					});

					imageContainer.addEventListener('mouseleave', function() {
						isDragging = false;
						imageContainer.style.cursor = 'grab';
					});

					imageContainer.addEventListener('mouseup', function() {
						isDragging = false;
						imageContainer.style.cursor = 'grab';
					});

					imageContainer.addEventListener('mousemove', function(e) {
						if (!isDragging) return;
						e.preventDefault();
						const x = e.pageX - imageContainer.offsetLeft;
						const y = e.pageY - imageContainer.offsetTop;
						const walkX = (x - startX) * 2;
						const walkY = (y - startY) * 2;
						imageContainer.scrollLeft = scrollLeft - walkX;
						imageContainer.scrollTop = scrollTop - walkY;
					});
				}
			});
		</script>
	</body>
</html>
